MODULE Contract;

REQUIRE System, Historizable, LegalEntity, Numerator, Document, PaymentCondition, Stock;

// ---------------------------------------- Договора ------------------------------------ //

CLASS ABSTRACT Contract 'Договор';
TABLE contract (Contract);
TABLE contractDate (Contract, DATE);

GROUP contract 'Реквизиты' : id;

id 'Код' = ABSTRACT STRING[100] (Contract) IN id CHARWIDTH 10 MATERIALIZED ;

number 'Номер' = ABSTRACT STRING[48] (Contract) IN numbered MATERIALIZED CHARWIDTH 7;
series 'Серия' = ABSTRACT BPSTRING[2] (Contract) IN numbered MATERIALIZED CHARWIDTH 3 NOFLEX; 

seriesNumber 'Серия/Номер' (Contract o) = 
    CONCAT '', series(o), number(o) 
    CHARWIDTH 7 INDEXED MATERIALIZED;

//numberContract 'Номер договора' = DATA BPSTRING[30] (Contract) IN contract;
dateFrom 'Действует (с)' = DATA DATE (Contract) IN contract;
dateTo 'Действует (по)' = DATA DATE (Contract) IN contract;
active 'Действуюший' (Contract contract, DATE date) =
    dateFrom(contract) <= date AND NOT dateTo(contract) < date;

description 'Описание' (Contract contract) = CONCAT '', seriesNumber(contract),
                                                       ' от '+ toDateDDMMYYYY(dateFrom(contract));

GROUP party 'Контрагенты' : id;

partyA = ABSTRACT LegalEntity (Contract) MATERIALIZED INDEXED;
namePartyA 'Организация (поставщик)' (Contract contract) = name(partyA(contract)) IN party;
addressPartyA 'Адрес организация (поставщик)' (Contract contract) = address(partyA(contract)) IN party;

partyB = ABSTRACT LegalEntity (Contract) MATERIALIZED INDEXED;
namePartyB 'Организация (покупатель)' (Contract contract) = name(partyB(contract)) IN party;
addressPartyB 'Адрес организация (покупатель)' (Contract contract) = address(partyB(contract)) IN party;

countContract 'Кол-во договоров' (LegalEntity partyA, LegalEntity partyB) =
    GROUP SUM 1 IF partyA(Contract contract) == partyA AND partyB(contract) == partyB;

TABLE stockContract (Stock, Contract);

inPartyA 'Вкл.'  = ABSTRACT BOOLEAN (Stock, Contract) MATERIALIZED INDEXED;
inPartyB 'Вкл.' = ABSTRACT BOOLEAN (Stock, Contract) MATERIALIZED INDEXED;

namePartyAStocks 'Склады поставщика' (Contract contract) = GROUP
                                                 CONCAT name(Stock stock) IF inPartyA(stock, contract) , ', '
                                                 ORDER stock CHARWIDTH 30 MATERIALIZED;
namePartyBStocks 'Склады покупателя' (Contract contract) = GROUP
                                                 CONCAT name(Stock stock) IF inPartyB(stock, contract) , ', '
                                                 ORDER stock CHARWIDTH 30 MATERIALIZED;

countContract 'Кол-во договоров' (partyA, Stock stockA, partyB, Stock stockB) =
    GROUP SUM 1 IF inPartyA(stockA, Contract contract) AND inPartyB(stockB, contract) BY partyA(contract), partyB(contract);

GROUP payment 'Оплата' : public;

//договор по умолчанию
isDefault 'По умолчанию' = ABSTRACT BOOLEAN (Contract) IN party;
  
// Валюты
currency = DATA Currency (Contract);
nameCurrency 'Валюта взаиморасчетов' (Contract contract) = name(currency(contract)) IN payment;
shortNameCurrency 'Валюта взаиморасчетов' (Contract contract) = shortName(currency(contract)) IN payment;
symbolCurrency 'Символ' (Contract contract) = symbol(currency(contract)) IN payment;

typeExchange (contract) = DATA TypeExchange (Contract);
nameTypeExchange 'Тип обмена' (Contract contract) = name(typeExchange(contract)) IN payment;

CONSTRAINT currency(Contract contract) != currency(typeExchange(contract))
    CHECKED BY typeExchange[Contract] MESSAGE 'Валюта типа обмена должна соответствовать валюте договора';

// Условия оплаты
paymentCondition 'Условия оплаты' =  DATA PaymentCondition (Contract);
typePayment 'Тип оплаты' (Contract contract) = type(paymentCondition(contract));
descriptionPaymentCondition 'Условия оплаты' (Contract contract) = description(paymentCondition(contract)) IN payment;
shortDescriptionPaymentCondition 'Условия оплаты' (Contract contract) = shortDescription(paymentCondition(contract)) IN payment;

note 'Примечание' = DATA STRING[100] (Contract) CHARWIDTH 20;

//для договора
CLASS ContractType 'Тип договора';

contractType = ABSTRACT ContractType (Contract);
nameContractType 'Тип договора'  = staticCaption(contractType(Contract c));

FORM contracts 'Договоры'
    OBJECTS c = Contract
    PROPERTIES(c) READONLY namePartyA, namePartyAStocks, namePartyB, namePartyBStocks, id SHOWIF showIDs(),
                           seriesNumber, dateFrom, dateTo, isDefault, nameCurrency, 
                           nameTypeExchange, descriptionPaymentCondition, note
    PROPERTIES(c) NEWSESSION EDIT, DELETE 

    LIST Contract OBJECT c
;

DESIGN options {
    pane{
        NEW contract {
            caption = 'Договор';
        }
    }
}

contractSupplier= DATA LOCAL LegalEntity();
nameContractSupplier 'Поставщик' = name(contractSupplier()) CHARWIDTH 15;

contractCustomer= DATA LOCAL LegalEntity();
nameContractCustomer 'Покупатель' = name(contractCustomer()) CHARWIDTH 15;

FORM contractDialog 'Договоры'
    OBJECTS dt = DATE PANEL 
    PROPERTIES val = VALUE (dt)
    PROPERTIES nameContractSupplier(), nameContractCustomer() 
    
    OBJECTS c = Contract
    PROPERTIES(c) READONLY namePartyA, namePartyAStocks, namePartyB, namePartyBStocks, 
                           seriesNumber, dateFrom, dateTo, isDefault, nameCurrency, 
                           nameTypeExchange, descriptionPaymentCondition, note
    FILTERS partyA(c) == contractSupplier() OR c IS Contract AND NOT contractSupplier(),
            partyB(c) == contractCustomer() OR c IS Contract AND NOT contractCustomer()
    FILTERGROUP active 
        FILTER 'Активные' dateFrom(c) <= dt AND NOT dateTo(c) < dt 'F5' DEFAULT      
;
DESIGN contractDialog {
    BOX {
        size = (1024, 768);
        NEW top {
            type = CONTAINERH;
            caption = 'Шапка';
            MOVE PROPERTY (val) {caption = 'Дата';}
            MOVE PROPERTY(nameContractSupplier());
            MOVE PROPERTY(nameContractCustomer());
        }
        MOVE BOX(c);
        MOVE TOOLBARBOX;
    }
}

// ----------------- Объединение ------------------------

in 'Отм.' = DATA LOCAL BOOLEAN (Contract);
countInContract = GROUP SUM 1 IF in(Contract c);

FORM confirmReplaceContract 'Объединяемые договора'
    OBJECTS contract = Contract PANEL 

    OBJECTS c = Contract  
    PROPERTIES(c) READONLY seriesNumber, namePartyA, namePartyB
    FILTERS c==contract

    OBJECTS c2 = Contract
    PROPERTIES(c2) in
    PROPERTIES(c2) READONLY seriesNumber, namePartyA, namePartyB
    FILTERS in(c2)
;

DESIGN confirmReplaceContract {
    REMOVE BOX(contract);
    NEW splitContainer{
        type = SPLITV;
        fill = 1;
        MOVE BOX(c){
            caption = 'Основной договор';
        }
        MOVE BOX(c2){
            caption = 'Удаляемый договор';
        }           
    }
    MOVE TOOLBARBOX;
}

replace  ABSTRACT LIST ( Contract, Contract);
preReplace  ABSTRACT LIST ( Contract, Contract);

replace 'Объединить'(Contract contract)  { 
    setNoEventsInTransaction();
    DIALOG confirmReplaceContract OBJECTS contract = contract DO {
        FOR in(Contract c) AND contract IS Contract DO {
            IF c != contract THEN {
                IF partyA(c) == partyA(contract) AND partyB(c) == partyB(contract) THEN {
                    preReplace(c, contract);
                    replace(c, contract);
                    in(c) <- NULL;
                    DELETE c;
                } ELSE {
                    MESSAGE 'Выделенные договоры не могут быть объединены. Поставщик и покупатель должны быть одинаковыми';
                }
            }
        }
        apply();
    }
    
    in(Contract c) <- NULL;
               
    dropNoEventsInTransaction();
} CONFIRM;

EXTEND FORM contracts
    PROPERTIES(c) in BEFORE namePartyA(c), replace
;

DESIGN contracts {
   TOOLBARRIGHT (c) {
    MOVE PROPERTY (replace(c)) BEFORE TOOLBAR(c);
   }
}

// ------------------------------------ Макрос для создания договоров по умолчанию ----------------------------- //

//META defineContractDefault (contract, partyA, partyB)
//    @defineContractDefault (contract, ###partyA, ###partyB, partyA, partyB);
//END

META defineContractDefault (contract, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB)
    @defineContractDefault(contract, ###contract, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB);
END

META defineContractDefault (contract, contractClass, partyAClass, stockAClass, partyBClass, stockBClass, prefixA, prefixB)

    isDataDefault 'По умолчанию' = DATA BOOLEAN (###contract);
    isDefault(###contract contract) += isDataDefault(contract);
    skipContract 'По умолчанию' = ABSTRACT BOOLEAN (###contract) MATERIALIZED;
    
    count###contract###prefixA###prefixB (pA, pB, DATE dateIn)= GROUP SUM 1 
        IF dateFrom(###contract contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);

    single###contract###prefixA###prefixB (pA, pB, DATE dateIn) = GROUP MAX ###contract contract 
        IF dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);

    default###contract###prefixA###prefixB (pA, pB, DATE dateIn) = GROUP MAX ###contract contract IF isDataDefault(contract) 
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);
        
    default###contract###prefixA###prefixB(stockAClass sA, stockAClass sB, DATE dateIn)  = GROUP
            MAX ###contract contract 
        IF in###prefixA(sA,contract) AND in###prefixB(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract);
            
    default###contract###prefixA (pA, stockAClass sA, DATE dateIn) = GROUP MAX ###contract contract 
        IF in###prefixA(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract);      
                  
    count###contract###prefixA (pA, stockAClass sA, DATE dateIn) = GROUP SUM 1 
        IF in###prefixA(sA,###contract contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract);  
                                
    default###contract###prefixA###prefixB (pA, stockAClass sA, pB, DATE dateIn) = GROUP MAX ###contract contract 
        IF in###prefixA(sA,contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);      
                  
    count###contract###prefixA###prefixB (pA, stockAClass sA, pB, DATE dateIn) = GROUP SUM 1 
        IF in###prefixA(sA,###contract contract) //AND inCustomerStockContractSku(sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract), prefixB(contract);
            
    default###contract###prefixA###prefixB (pA, stockAClass sB, DATE dateIn) = GROUP MAX ###contract contract 
        IF in###prefixB[stockAClass,contractClass](sB,contract)
        AND dateFrom(contract) <= dateIn AND NOT dateTo(contract) < dateIn AND NOT skipContract(contract)
            BY prefixA(contract);    
                  
END

META defineDocumentContract (objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContract (objectClass, contractType, prefixA, prefixB, default###contractType###prefixA###prefixB, partyAMessage, partyBMessage, caption, NS);
END

META defineDocumentContract (objectClass, contractType, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentContract (objectClass, contractType, ###contractType, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS);
END

META defineDocumentContract (objectClass, contractType, contractTypeClass, prefixA, prefixB, defaultContractProp, partyAMessage, partyBMessage, caption, NS)
    contractType = DATA contractTypeClass (objectClass);
    number###contractType 'Договор (номер)' (objectClass o) = number[Contract](contractType(o)) IN documentPrm;
    seriesNumber###contractType 'Договор (серия/номер)' (objectClass o) = seriesNumber[Contract](contractType(o)) IN documentPrm;
    dateFrom###contractType 'Дата договора' (objectClass o) = dateFrom(contractType(o)) IN documentPrm;

    description###contractType 'Описание договора' (objectClass o)= CONCAT ' ', seriesNumber###contractType(o), ' от ' + dateFrom###contractType(o);
    
    replace(contractTypeClass c, contractTypeClass o) + { contractType(objectClass object) <- o WHERE contractType(object) == c;}

    isCommission 'Продажа на комиссию' = DATA BOOLEAN (objectClass) IN documentPrm;
    isCommission(objectClass o) <- type(contractType(o)) == ContractSkuType.commission
        WHEN CHANGED(contractType(o));

    skipSet###contractType = ABSTRACT VALUE BOOLEAN (###objectClass) PREREAD;
    WHEN LOCAL (CHANGED(prefixA(objectClass o)) OR CHANGED(prefixB(o)) OR CHANGED(prefixA##Stock(o))
                OR CHANGED(prefixB##Stock(o)) OR CHANGED(date(o))) AND NOT CHANGED(contractType(o)) AND NOT skipSet###contractType(o) NOINLINE DO {
                
        contractType(o) <- OVERRIDE defaultContractProp(prefixA##Stock(o), prefixB##Stock(o), date(o)),
                                                 defaultContractProp(prefixA(o), prefixB(o), date(o)),
                                                 single###contractType###prefixA###prefixB(prefixA(o), prefixB(o), date(o)) IF count###contractType###prefixA###prefixB(prefixA(o), prefixB(o), date(o)) == 1; 
    }

    CONSTRAINT contractType(objectClass o) AND NOT prefixA(o) == partyA(contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE partyAMessage;

    CONSTRAINT contractType(objectClass o) AND NOT prefixB(o) == partyB(contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE partyBMessage;
    
    dateFromConstraintContract##objectClass 'Дата начала контроля сроков договора '##caption = DATA DATE ();  
    
    EXTEND FORM options 
        PROPERTIES NS###dateFromConstraintContract##objectClass = dateFromConstraintContract##objectClass()    
    ;
        
    DESIGN options {
        contract {
            MOVE PROPERTY(NS###dateFromConstraintContract##objectClass);
        }
    }      
    skipCheckDateContract = ABSTRACT BOOLEAN (objectClass);
    CONSTRAINT contractType(objectClass o) AND NOT (dateFrom(contractType(o)) <= date(o) 
               AND NOT (dateTo(contractType(o)) < date(o))) AND NOT (dateFromConstraintContract##objectClass() > date(o))
               AND NOT skipCheckDateContract(o)
               CHECKED BY contractType[objectClass]
               MESSAGE 'Договор просрочен или еще не действует';
                  
    CONSTRAINT contractType(objectClass o) AND count###prefixA##sStock(contractType(o)) AND NOT in###prefixA(prefixA##Stock(o),contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE 'Для документа выбран склад поставщика, который не включен в договор';        
                  
    CONSTRAINT contractType(objectClass o) AND count###prefixB##sStock(contractType(o)) AND NOT in###prefixB(prefixB##Stock(o),contractType(o))
        CHECKED BY contractType[objectClass] MESSAGE 'Для документа выбран склад покупателя, который не включен в договор';                    
                  
END

META defineDocumentAbstractContract (objectClass, contractType)
    @defineDocumentAbstractContract(objectClass, contractType, ###contractType);
END

META defineDocumentAbstractContract (objectClass, contractType, contractTypeClass)
    contractType = ABSTRACT contractTypeClass (objectClass) MATERIALIZED INDEXED;
    seriesNumber###contractType 'Номер договора' (objectClass o) = seriesNumber[Contract](contractType(o)) IN documentPrm;
    dateFrom###contractType 'Дата договора' (objectClass o) = dateFrom(contractType(o)) IN documentPrm;
    
    description###contractType 'Описание договора' (objectClass o)= CONCAT ' ', seriesNumber###contractType(o), ' от ' + toDateDDMMYYYY(dateFrom###contractType(o));

    isCommission 'Продажа на комиссию' = ABSTRACT BOOLEAN (objectClass) MATERIALIZED IN documentPrm;
END
META defineDocumentInterfaceContract (objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS)
    @defineDocumentAbstractContract(objectClass, contractType);
    @defineDocumentContract(User###objectClass, contractType, prefixA, prefixB, partyAMessage, partyBMessage, caption, NS);
    contractType(User##objectClass o) += contractType(o);
    isCommission(User##objectClass o) += isCommission(o);
END
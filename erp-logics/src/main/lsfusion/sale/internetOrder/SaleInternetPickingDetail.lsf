MODULE SaleInternetPickingDetail;

REQUIRE SaleInternetPicking, SaleInternetOrderDetail;

NAMESPACE Sale;

EXTEND FORM picking 
    PROPERTIES (d) READONLY nameStatus BEFORE idBarcodeSku(d)
;
EXTEND FORM pickings 
    PROPERTIES (d) READONLY nameStatus BEFORE idBarcodeSku(d)
;
EXTEND FORM pickingDashboard
    PROPERTIES (d) READONLY nameStatus BEFORE idBarcodeSku(d) 
    PROPERTIES (pd) READONLY nameStatus BEFORE idBarcodeSku(pd) 
;

skipStatusNotAvailable = DATA BOOLEAN (InternetOrderDetail);
overStatusPicked = ABSTRACT BOOLEAN ();

countPickingInternetOrderDetail (o) =
    GROUP SUM 1 BY internetOrder(InternetOrderDetail d) IF pickingQuantity(d) > 0;

countNotPickingInternetOrderDetail (o) =
    GROUP SUM 1 BY internetOrder(InternetOrderDetail d) IF NOT pickingQuantity(d);
        
setPickedStatus (InternetOrderDetail d)  { 
    status(d) <- StatusInternetOrderDetail.picked WHERE quantity(d) > 0.0 AND quantity(d) == pickingQuantity(d);
//    status(d) <- StatusInternetOrderDetail.partlyPicked WHERE  (quantity(d) > pickingQuantity(d)) AND (pickingQuantity(d) != 0.0);
    IF NOT skipStatusNotAvailable(d) THEN
        status(d) <- StatusInternetOrderDetail.notAvailable WHERE quantity(d) AND pickingQuantity(d)==0.0;
    
    status(d) <- StatusInternetOrderDetail.assigned WHERE quantity(d) AND NOT pickingQuantity(d); //при удалении комплектации сбрасывается кол-во, но склад остается, поэтому и статус ставим назначено
    IF NOT overStatusPicked() THEN 
        status(InternetOrder o) <- StatusInternetOrder.picked                                    
            WHERE internetOrder(d) == o AND quantityInternetOrderDetail(o) == pickingQuantityInternetOrderDetail(o);
    ELSE 
        status(InternetOrder o) <- StatusInternetOrder.picked                                    
            WHERE internetOrder(d) == o AND countPickingInternetOrderDetail(o) AND NOT countNotPickingInternetOrderDetail(o);                

}

WHEN CHANGED (pickingQuantity(InternetOrderDetail d)) DO {
    setPickedStatus(d);
}

WHEN DROPPED(picking(InternetOrderDetail d)) DO {
    status(InternetOrder o) <- StatusInternetOrder.agreed WHERE o == internetOrder(d);
    status(d) <- StatusInternetOrderDetail.assigned;
    pickingQuantity(d) <- NULL;
}
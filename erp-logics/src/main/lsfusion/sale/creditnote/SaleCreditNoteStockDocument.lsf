MODULE SaleCreditNoteStockDocument;

REQUIRE PurchaseSaleCreditNote, SalePurchaseInvoice, PricingSum;

NAMESPACE Sale;

accountPrice 'Цена (учетная)' = DATA NUMERIC[16,4] (UserCreditNoteDetail) CHARWIDTH 7;
@deriveDocumentDetailPriceAccountBatchDisable (userCreditNote, account, sku, supplierStock);

EXTEND FORM userCreditNote
    PROPERTIES(d) accountPrice
;

// ------------------------------- Проведение по товарному отчету ------------------------ //
EXTEND CLASS UserCreditNote : IncStockDocumentLedger;

series[StockDocumentLedger] (UserCreditNote ledger) += series[UserCreditNote](ledger);
number[StockDocumentLedger] (UserCreditNote ledger) += number[UserCreditNote](ledger);
dateTime[StockDocumentLedger] (UserCreditNote ledger) += dateTime(ledger);
isPosted[StockDocumentLedger] (UserCreditNote ledger) += isPosted(ledger);
isClosed[StockDocumentLedger] (UserCreditNote ledger) += isClosed(ledger);
stock[StockDocumentLedger] (UserCreditNote ledger) += supplierStock(ledger);
description[StockDocumentLedger] (UserCreditNote ledger) += STRING[200](description(ledger));

type(UserCreditNote l) += STRING[50]('Акт расхождения') IF l IS UserCreditNote;

retailSum(CreditNoteDetail idetail) = NUMERIC[18,4](round(quantity(idetail) * shipmentPrice(invoiceDetail(idetail)), currency(idetail))); 
            
retailSumItemCreditNoteDetail 'Сумма, товар' (creditNote) =
    GROUP
        SUM retailSum(CreditNoteDetail idetail) IF isItem(sku(idetail)) BY creditNote(idetail) IN documentSum;
retailSumContainerCreditNoteDetail 'Сумма, тара' (creditNote) =
    GROUP 
        SUM retailSum(CreditNoteDetail idetail) IF isContainer(sku(idetail)) BY creditNote(idetail)IN documentSum;

sumItem (UserCreditNote ledger) += OVERRIDE retailSumItemCreditNoteDetail(ledger) IF stock(ledger) IS DepartmentStore AND NOT costLedger(stock(ledger)), 
                                            sumItemCreditNoteDetail(ledger);
sumContainer (UserCreditNote ledger) += OVERRIDE retailSumContainerCreditNoteDetail(ledger) IF stock(ledger) IS DepartmentStore AND NOT costLedger(stock(ledger)), 
                                                 sumContainerCreditNoteDetail(ledger);

legalEntity(UserCreditNote ledger) += customer(ledger);
legalEntityStock(UserCreditNote ledger) += customerStock(ledger); 

operation[StockDocumentLedger](UserCreditNote ledger) += operation[UserCreditNote](ledger);
isReturn(UserCreditNote ledger) += ledger IS UserCreditNote;
close[StockDocumentLedger](UserCreditNote l) + {  close[Sale.CreditNote](l); }


overFillCreditNote(Sale.UserCreditNoteDetail sd, Purchase.CreditNoteDetail pd) + {
    invoiceDetail(sd) <- invoiceDetail(invoiceDetail[Purchase.InvoiceCreditNoteDetail](pd));
}
overFillCreditNoteDetail(Sale.UserCreditNoteDetail sd, Purchase.CreditNoteDetail pd) + {
    invoiceDetail(sd) <- invoiceDetail(invoiceDetail[Purchase.InvoiceCreditNoteDetail](pd));
}

// ------------------------------- Проведение по регистру остатков ------------------------ //
EXTEND CLASS Sale.UserCreditNoteDetail : InLIFOSkuLedger;
dateTime[DataSkuLedger] (Sale.UserCreditNoteDetail ledger) += dateTime(ledger);
isPosted[DataSkuLedger] (Sale.UserCreditNoteDetail ledger) += isPosted(ledger);
isClosed[DataSkuLedger] (Sale.UserCreditNoteDetail ledger) += isClosed(ledger);
sku[DataSkuLedger] (Sale.UserCreditNoteDetail ledger) += sku(ledger);
stock[DataSkuLedger] (Sale.UserCreditNoteDetail ledger) += supplierStock(ledger);
description[DataSkuLedger] (Sale.UserCreditNoteDetail ledger) += description(userCreditNote(ledger));
    
quantity[InLIFOSkuLedger] (Sale.UserCreditNoteDetail ledger) += quantity(ledger);
batch[SkuLedger](Sale.UserCreditNoteDetail ledger) += batch(ledger);
changed(Sale.UserCreditNoteDetail ledger) += CHANGED(batch(ledger));

accountSum (Sale.UserCreditNoteDetail detail) = 
    NUMERIC[18,4](round(quantity(detail)*accountPrice(detail), defaultRound(currency(supplier(detail)))));
sum[InSkuLedger](Sale.UserCreditNoteDetail ledger) += OVERRIDE retailSum(ledger), accountSum(ledger);
stockDocumentLedger[SkuLedger](Sale.UserCreditNoteDetail ledger) += userCreditNote(ledger);
show[SkuLedger](Sale.UserCreditNoteDetail d) + {  show(d); }
MODULE PurchaseReturnInvoiceEVAT;

REQUIRE PurchaseReturnInvoice, EVAT, CustomsGroup, PurchaseReturnBlankCodeEVAT;

NAMESPACE PurchaseReturn;


EXTEND CLASS PurchaseReturn.Invoice : EVATDocument;
name(PurchaseReturn.Invoice document) += description(document);
isPosted[EVATDocument](Invoice document) += isPosted(document);
number[EVATDocument](PurchaseReturn.Invoice document) += STRING[100](number(document));
series[EVATDocument](PurchaseReturn.Invoice document) += STRING[2](series(document));
dateTime[EVATDocument](PurchaseReturn.Invoice document) += dateTime(document);

includeEVAT = ABSTRACT CASE BOOLEAN (Invoice);

EXTEND CLASS EVATType { purchaseReturn 'Закупка-возврат' }
type[EVATDocument](PurchaseReturn.Invoice i) += EVATType.purchaseReturn IF i IS PurchaseReturn.Invoice;

needCreateEVAT[EVATDocument](Invoice i) += WHEN includeEVAT(i)  THEN TRUE;
VATSum[EVATDocument] (PurchaseReturn.Invoice i) += NUMERIC[18,4](VATSumInvoiceDetail(i));

VATSumRange[EVATDocument, Range](PurchaseReturn.Invoice i, Range r) += [ GROUP SUM VATSum(InvoiceDetail d) BY invoice(d), VAT(d)](i,r);
sumWithVATRange[EVATDocument, Range](PurchaseReturn.Invoice i, Range r) += [ GROUP SUM invoiceSum(InvoiceDetail d) BY invoice(d), VAT(d)](i,r);
customer[EVATDocument](PurchaseReturn.Invoice i) += customer(i);

overCreateEVATPurchaseReturnInvoice  ABSTRACT LIST ( EVAT, PurchaseReturn.Invoice);
overEVATDetailPurchaseReturnInvoiceDetail  ABSTRACT LIST ( EVATDetail, InvoiceDetail);

createEVATPurchaseReturnInvoice 'Накладные (закупка-возврат)' (DATE dFrom, DATE dTo)  { 
    IF dFrom IS DATE AND dTo IS DATE THEN {
        FOR includeEVAT(Invoice i) AND isPosted(i) AND NOT [ GROUP SUM 1 BY (CONCAT '', seriesDoc(EVAT e), numberDoc(e)), date(e)](seriesNumber(i), date(i)) AND date(i) >= dFrom AND date(i) <= dTo NEW e = EVAT DO {
            EVATDocument(e) <- i;            
            status(e) <- EVATStatus.original;
            type(e) <- EVATType.purchaseReturn;
                    
            date(e) <- date(i);
            
            numberContract (e) <- number(contractSku(i));
            dateContract (e) <- dateFrom(contractSku(i));
            codeDocType (e) <- 603;
            blankCodeDoc (e) <- OVERRIDE idBlankCode(i), blankCodeDoc() IF i IS Invoice, blankCodeDefault() IF i IS Invoice;
            seriesDoc(e) <- series(i);
            numberDoc(e) <- number(i);
            unpSender(e) <- UNP(customer(i));
            
            //Поставщик
            supplier(e) <- customer(i);
            branchCodeSupplier(e) <- branchCode(customerStock(i));
            
            //Получатель
            customer(e) <- supplier(i);
            branchCodeCustomer(e) <- branchCode(supplierStock(i));            
            
            //Грузоотправитель
            consignor(e) <- ISTRING[200](OVERRIDE fullName(customer(i)), name(customer(i)));
            countryCodeConsignor (e) <- sid(country(customer(i)));
            unpConsignor (e) <- OVERRIDE UNPForeign(customer(i)), UNP(customer(i)); 
            shippingAddressConsignor(e) <- OVERRIDE dataAddressSupplierStock (i), address(customerStock(i));
                                                 // берется именно supplier, так как для накладной Consignment поставщик и покупатель поменяны местами
    
            //Грузополучатель
            consignee(e) <- ISTRING[200](OVERRIDE fullName(supplier(i)), name(supplier(i)));
            countryCodeConsignee (e) <- sid(country(supplier(i)));
            unpConsignee (e) <- OVERRIDE UNPForeign(supplier(i)), UNP(supplier(i)); 
            shippingAddressConsignee(e) <- OVERRIDE dataAddressCustomerStock (i), address(supplierStock(i));
                                                 // берется именно customer, так как для накладной Consignment поставщик и покупатель поменяны местами
            
            
            noCustomer(e) <- NOT VATSumInvoiceDetail(i);
            
            overCreateEVATPurchaseReturnInvoice(e,i);
    
            FOR invoice(InvoiceDetail id) == i AND quantity(id) > 0 NEW ed = EVATDetail DO {
                evat(ed) <- e;
    
                name(ed) <- nameSku(id);
                sku(ed) <- sku(id);
                code(ed) <- codeCustomsGroup(defaultCountry(), sku(id));
                UOM(ed) <- UOM(sku(id));
                quantity(ed) <- quantity(id); 
                price(ed) <- price(id);
                sum(ed) <- sum(id);
                exciseSum(ed) <- 0;
                vatRate(ed) <- valueVAT(id);
                vatSum(ed) <- VATSum(id);
                sumWithVAT(ed) <- invoiceSum(id);
                overEVATDetailPurchaseReturnInvoiceDetail(ed,id);
                
                IF valueVAT(id) == 0 THEN
                    in(ed, DescriptionType.vatExcemption) <- TRUE;
                ELSE
                    in(ed, DescriptionType.deductionInFull) <- TRUE IF NOT notDeductionInFull();
            }
        }
        APPLY;    
    }
};

EXTEND FORM evats
    PROPERTIES createEVATPurchaseReturnInvoice(dFrom, dTo)
;

DESIGN evats {
    generate {
        MOVE PROPERTY(createEVATPurchaseReturnInvoice(dFrom, dTo));
    }
}
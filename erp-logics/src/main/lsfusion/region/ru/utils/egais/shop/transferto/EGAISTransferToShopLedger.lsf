MODULE EGAISTransferToShopLedger;

REQUIRE EGAISTransferToShop, EGAISFRegLedger, EGAISFRegShopLedger;

NAMESPACE EGAIS;

EXTEND CLASS TransferToShopPosition : FRegLedger;

posted(TransferToShopPosition l) += posted(l);

date(TransferToShopPosition l) += date(l);
number(TransferToShopPosition l) += number(l);

f2Reg(TransferToShopPosition l) += f2Reg(l);

quantity(TransferToShopPosition l) += -quantity(l);

// 2й регистр

CLASS TransferToShopLedger 'Перемещение с регистра 1' : FRegShopLedger;

transferToShopLedger = AGGR TransferToShopLedger WHERE product(TransferToShopPosition position) MATERIALIZED INDEXED; 

posted(TransferToShopLedger l) += l IS TransferToShopLedger;

date(TransferToShopLedger l) += date(position(l));
number(TransferToShopLedger l) += number(position(l));

client(TransferToShopLedger l) += client(position(l)); 

product(TransferToShopLedger l) += product(position(l));

quantity(TransferToShopLedger l) += quantity(position(l));

// create transfer to shop
createTransferToShop (Client c, DATE d, STRING caption) {
    LOCAL balance = NUMERIC[16,5] (F2Reg);
    balance (F2Reg r) <- currentBalance(r) IF client(r) = c AND quantity(product(r));
    
    LOCAL quantity = NUMERIC[16,5] (F2Reg);
    quantity (F2Reg r) <- PARTITION UNGROUP quantity LIMIT balance(r) ORDER r BY product(r);
    
    IF GROUP SUM 1 IF quantity(F2Reg r) THEN {
        NEW t = TransferToShop {
            posted(t) <- TRUE;
            
            client(t) <- c;
            dateTime(t) <- DATETIME(d);
            
            note(t) <- caption;
            
            FOR quantity(F2Reg r) NEW p = TransferToShopPosition DO {
                transferToShop(p) <- t;
                product(p) <- product(r);
                f2Reg(p) <- r;
                quantity(p) <- quantity(r);
            }
        }
    }
}
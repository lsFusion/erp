MODULE VetisProductImport;

REQUIRE VetisProduct, VetisProductItemImport;

NAMESPACE Vetis;

GROUP getProductByTypeListRequest EXTID 'v2:getProductByTypeListRequest' : body;
GROUP getProductByTypeListRequestListOptions EXTID 'bs:listOptions' : getProductByTypeListRequest;

FORM getProductByTypeListRequest FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    PROPERTIES ATTR ='http://api.vetrf.ru/schema/cdm/base' EXTID 'xmlns:bs', 
                    ='http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2' EXTID 'xmlns:v2', 
                    ='http://api.vetrf.ru/schema/cdm/dictionary/v2' EXTID 'xmlns:prod'
    PROPERTIES() IN getProductByTypeListRequestListOptions count EXTID 'bs:count', offset EXTID 'bs:offset'
    
    OBJECTS t = ProductType PANEL
    PROPERTIES id(t) EXTID 'prod:productType' IN getProductByTypeListRequest
;

FORM getProductByTypeListRequestParams 'Параметры запроса продукции'
    PROPERTIES() offset, count
;

GROUP getProductByTypeListResponse EXTID 'v2=http://api.vetrf.ru/schema/cdm/registry/ws-definitions/v2:getProductByTypeListResponse' : body;
GROUP getProductByTypeListResponseList EXTID 'dt:productList' : getProductByTypeListResponse;

FORM getProductByTypeListResponse FORMEXTID 'soapenv=http://schemas.xmlsoap.org/soap/envelope/:Envelope'
    OBJECTS i = INTEGER EXTID 'dt:product' IN getProductByTypeListResponseList
    PROPERTIES(i) guid EXTID 'bs:guid',
                  active EXTID 'bs:active',
                  name EXTID 'dt:name'
;

importProductByTypeList (ProductType pt) {
    EXPORT getProductByTypeListRequest OBJECTS t = pt XML;
    
    LOCAL response = FILE();
    TRY {
        EXTERNAL HTTP urlProduct() HEADERS httpHeaders PARAMS exportFile() TO response;
    } CATCH {
        fileToString(response());
        MESSAGE CONCAT ' ', 'Ошибка при запросе к службе : ', resultString();
        RETURN;
    }
    
    IMPORT getProductByTypeListResponse XML FROM response();
    
    FOR guid(INTEGER i) AND NOT product(guid(i)) DO NEW p = Product {
        guid(p) <- guid(i); 
    }
    
    FOR guid(INTEGER i) = guid(Product p) DO {
        name(p) <- name(i);
        
        productType(p) <- pt;
        
        inactive(p) <- NOT active(i);
    }
}

getProductByTypeList 'Загрузить данные' (ProductType pt) {
    NEWSESSION {
        offset() <- 0;
        count() <- 1000;
        DIALOG getProductByTypeListRequestParams DO {
            importProductByTypeList(pt);
            APPLY;
        }
    }
}

EXTEND FORM productType
    PROPERTIES(o) getProductByTypeList DRAW p TOOLBAR
;

getProductByTypeList 'Загрузить данные' () {
    NEWSESSION {
        offset() <- 0;
        count() <- 1000;
        DIALOG getProductByTypeListRequestParams DO {   
            FOR ProductType pt IS ProductType DO
                importProductByTypeList(pt);
        }
        APPLY;
    }
}

EXTEND FORM products
    PROPERTIES() getProductByTypeList DRAW o TOOLBAR
;
